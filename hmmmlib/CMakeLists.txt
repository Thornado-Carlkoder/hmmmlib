cmake_minimum_required(VERSION 3.7.2)
project(HMMLIB)




OPTION( ENABLE_CODECOVERAGE "Enable code coverage testing support" )

if ( ENABLE_CODECOVERAGE )

    if ( NOT CMAKE_BUILD_TYPE STREQUAL "Debug" )
        message( WARNING "Code coverage results with an optimised (non-Debug) build may be misleading" )
    endif ( NOT CMAKE_BUILD_TYPE STREQUAL "Debug" )

    if ( NOT DEFINED CODECOV_OUTPUTFILE )
        set( CODECOV_OUTPUTFILE cmake_coverage.output )
    endif ( NOT DEFINED CODECOV_OUTPUTFILE )

    if ( NOT DEFINED CODECOV_HTMLOUTPUTDIR )
        set( CODECOV_HTMLOUTPUTDIR coverage_results )
    endif ( NOT DEFINED CODECOV_HTMLOUTPUTDIR )

    if ( CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_GNUCXX )
        find_program( CODECOV_GCOV HMMLIB )
        find_program( CODECOV_LCOV lcov )
        find_program( CODECOV_GENHTML genhtml )
        add_definitions( -fprofile-arcs -ftest-coverage )
        link_libraries( HMMLIB )
        set( CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} --coverage )
        add_custom_target( coverage_init ALL ${CODECOV_LCOV} --base-directory .  --directory ${CMAKE_BINARY_DIR} --output-file ${CODECOV_OUTPUTFILE} --capture --initial )
        add_custom_target( coverage ${CODECOV_LCOV} --base-directory .  --directory ${CMAKE_BINARY_DIR} --output-file ${CODECOV_OUTPUTFILE} --capture COMMAND genhtml -o ${CODECOV_HTMLOUTPUTDIR} ${CODECOV_OUTPUTFILE} )
    endif ( CMAKE_COMPILER_IS_GNUCXX )

endif (ENABLE_CODECOVERAGE )


 
include_directories(
       ${CMAKE_SOURCE_DIR}/src/
       ${CMAKE_SOURCE_DIR}/src/Decoding
       ${CMAKE_SOURCE_DIR}/src/Evaluation
       ${CMAKE_SOURCE_DIR}/src/Evaluation/blas
       ${CMAKE_SOURCE_DIR}/src/Evaluation/conventional
       ${CMAKE_SOURCE_DIR}/src/Evaluation/csr
       ${CMAKE_SOURCE_DIR}/src/HMM
       ${CMAKE_SOURCE_DIR}/src/Training)

file(GLOB SOURCES
       ${PROJECT_SOURCE_DIR}/src/shared.c
       ${PROJECT_SOURCE_DIR}/src/Decoding/*.c
       ${PROJECT_SOURCE_DIR}/src/Decoding/*.h
       ${PROJECT_SOURCE_DIR}/src/Evaluation/blas/*.c
       ${PROJECT_SOURCE_DIR}/src/Evaluation/blas/*.h
       ${PROJECT_SOURCE_DIR}/src/Evaluation/conventional/*.c
       ${PROJECT_SOURCE_DIR}/src/Evaluation/conventional/*.h
       ${PROJECT_SOURCE_DIR}/src/Evaluation/csr/*.c
       ${PROJECT_SOURCE_DIR}/src/Evaluation/csr/*.h
       ${PROJECT_SOURCE_DIR}/src/HMM/*.c
       ${PROJECT_SOURCE_DIR}/src/HMM/*.h
       ${PROJECT_SOURCE_DIR}/src/Training/*.c
       ${PROJECT_SOURCE_DIR}/src/Training/*.h)

#
# Uncomment the following to create a library
#
add_library(HMMLIB SHARED ${PROJECT_SOURCE_DIR}/src/shared.c)
target_link_libraries(HMMLIB m)
target_link_libraries(HMMLIB cblas)

set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE 1) #or #set(CMAKE_POSITION_INDEPENDENT_CODE ON)




# Add Tests content for the executable
include_directories(
       ${CMAKE_SOURCE_DIR}/src/
       ${CMAKE_SOURCE_DIR}/src/Decoding
       ${CMAKE_SOURCE_DIR}/src/Evaluation
       ${CMAKE_SOURCE_DIR}/src/Evaluation/blas
       ${CMAKE_SOURCE_DIR}/src/Evaluation/conventional
       ${CMAKE_SOURCE_DIR}/src/Evaluation/csr
       ${CMAKE_SOURCE_DIR}/src/HMM
       ${CMAKE_SOURCE_DIR}/Test
       ${CMAKE_SOURCE_DIR}/src/Training)


file(GLOB exeSOURCES
       ${PROJECT_SOURCE_DIR}/src/main.c
       ${PROJECT_SOURCE_DIR}/src/Decoding/*.c
       ${PROJECT_SOURCE_DIR}/src/Decoding/*.h
       ${PROJECT_SOURCE_DIR}/src/Evaluation/blas/*.c
       ${PROJECT_SOURCE_DIR}/src/Evaluation/blas/*.h
       ${PROJECT_SOURCE_DIR}/src/Evaluation/conventional/*.c
       ${PROJECT_SOURCE_DIR}/src/Evaluation/conventional/*.h
       ${PROJECT_SOURCE_DIR}/src/Evaluation/csr/*.c
       ${PROJECT_SOURCE_DIR}/src/Evaluation/csr/*.h
       ${PROJECT_SOURCE_DIR}/src/HMM/*.c
       ${PROJECT_SOURCE_DIR}/src/HMM/*.h
       ${PROJECT_SOURCE_DIR}/Test/*.c
       ${PROJECT_SOURCE_DIR}/Test/*.h
       ${PROJECT_SOURCE_DIR}/src/Training/*.c
       ${PROJECT_SOURCE_DIR}/src/Training/*.h)


#
# Comment the following to create a library
#
add_executable(exeHMMLIB ${exeSOURCES})
target_link_libraries(exeHMMLIB m cblas)

foreach(FILE ${exeSOURCES}) 
    # Get the directory of the source file
    get_filename_component(PARENT_DIR "${FILE}" DIRECTORY)

    # Remove common directory prefix to make the group
    string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}" "" GROUP "${PARENT_DIR}")

    # Make sure we are using windows slashes
    string(REPLACE "/" "\\" GROUP "${GROUP}")

    # Group into "Source Files" and "Header Files"
    if ("${FILE}" MATCHES ".*\\.cpp")
       set(GROUP "Source Files${GROUP}")
    elseif("${FILE}" MATCHES ".*\\.h")
       set(GROUP "Header Files${GROUP}")
    endif()

    source_group("${GROUP}" FILES "${FILE}")
endforeach()


